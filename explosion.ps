// pixel shader

//globals
cbuffer ExplosionBuffer
{
    float3 distortion;
    float time;
};

Texture2D noiseTexture : register(t0);
Texture2D rampTexture : register(t1);
SamplerState SampleType;

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float4 deltaP : DELTAPOS;
};

float4 ExplosionPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
	float4 distex;

	

	//calculate the displacement in the same way as the vertex shader (but now using texture coords for better coloring)
	distex = noiseTexture.Sample(SampleType, input.tex);
	
	float displacement;
	displacement = distortion.x * distex.r + distortion.y * distex.g + distortion.z * distex.b;
	displacement = displacement * 2;

	//adjust displacement so it provides better color
	displacement = displacement / 3.5f + time - 0.35f;

	//clamp displacement based on time
	if (displacement < 0.0f){
		displacement = 0.0f;
	}
	if (displacement >= 1.0f) {
		discard;
	}

	//sample the ramp color using the displacement value
	float2 coords = float2(displacement, 0.0f);
	textureColor = rampTexture.Sample(SampleType, coords);
	

	return textureColor;
}